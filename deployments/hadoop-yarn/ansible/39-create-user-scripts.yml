#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2022, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

- name: "Install MySQL Database for Zeppelin/Shiro"
  hosts: zeppelin
  become: true
  gather_facts: true
  vars_files:
    - config/shiro.yml
    - config/aglais.yml
    - config/ansible.yml
    - config/hadoop.yml
    - config/zeppelin.yml
    - /tmp/ansible-vars.yml
  vars:
    export_users: |
            #!/bin/bash
            printf "Exporting users to file: auth.sql"
            printf "\n"

            mysqldump --no-create-info --databases "{{shirodbname}}"  > {{aghome}}/tmp/auth.sql

    create_hdfs_user: |
            #!/bin/bash
            # Setup HDFS user directory
            NEW_USERNAME=$1

            hdfs dfs -mkdir -p /user/$NEW_USERNAME
            hdfs dfs -chown -R $NEW_USERNAME:supergroup /user/$NEW_USERNAME

    create_mysql_user: |
            #!/bin/bash
            # Create MySQL user
            NEW_USERNAME=$1
            NEW_PASSWORD=$2
            NEW_USER_ROLE=$3

            USER_TABLE='users';
            USER_ROLES_TABLE='user_roles'

            NEW_PASSWORD_ENCRYPTED="$(java -jar {{aghome}}/lib/shiro-tools-hasher-cli.jar -i 500000 -f shiro1 -a SHA-256 -gss 128 $NEW_PASSWORD)"

            mysql {{shirodbname}} << EOF
            INSERT INTO $USER_TABLE (username, password) VALUES ("$NEW_USERNAME", "$NEW_PASSWORD_ENCRYPTED");
            INSERT INTO $USER_ROLES_TABLE (username, role_name) VALUES ("$NEW_USERNAME", "$NEW_USER_ROLE");
            EOF

    create_unix_user: |
            #!/bin/bash
            # Add user
            NEW_USERNAME=$1
            NEW_UNIX_DIR="/home/$NEW_USERNAME"

            sudo adduser $NEW_USERNAME
            sudo mkdir -p $NEW_UNIX_DIR/.ssh
            sudo ssh-keygen -t rsa -N '' -f $NEW_UNIX_DIR/.ssh/id_rsa
            sudo su -c "cat /home/{{ zepuser }}/.ssh/id_rsa.pub >> $NEW_UNIX_DIR/.ssh/authorized_keys"
            sudo usermod -a -G {{ zepusersgroup }} $NEW_USERNAME
            sudo chown -R $NEW_USERNAME:$NEW_USERNAME $NEW_UNIX_DIR/.ssh

    create_notebook_clone: |
            #!/bin/bash
            NEW_USERNAME=$1
            NEW_PASSWORD=$2
            ZEPPELIN_URL='http://localhost:8080'

            # Setup Clone of notebooks
            NEW_ZEPPELIN_DIR="{{zephome}}/notebook/Users/$NEW_USERNAME"
            NEW_ZEPPELIN_EXAMPLES_DIR="Users/$NEW_USERNAME/examples"
            mkdir -p $NEW_ZEPPELIN_DIR
            mkdir -p $NEW_ZEPPELIN_DIR/examples
            sudo chown -R {{ zepuser }}:{{ zepuser }} $NEW_ZEPPELIN_DIR

            zepcookies=/tmp/${NEW_USERNAME}.cookies

            curl \
            --silent \
            --request 'POST' \
            --cookie-jar "${zepcookies:?}" \
            --data "userName=${NEW_USERNAME:?}" \
            --data "password=${NEW_PASSWORD:?}" \
            ${ZEPPELIN_URL:?}/api/login

            curl --silent --cookie "${zepcookies:?}" "${ZEPPELIN_URL:?}/api/notebook"| jq -r '.body[] | select(.path | startswith("/Public")) | [.id, .path] | @tsv' |
            while IFS=$'\t' read -r id path; do
              curl -L         -H 'Content-Type: application/json'         -d "{'name': '${path/Public Examples/Users/$NEW_USERNAME}' }"        --request POST         --cookie "${zepcookies:?}"    $ZEPPELIN_URL/api/notebook/$id
            done

    add_user: |
            #!/bin/bash
            printf "Create a new Zeppelin user"
            printf "\n"
            printf "Username: "
            read NEW_USERNAME

            stty -echo
            printf "Password: "
            read NEW_PASSWORD
            stty echo

            printf "\n"
            printf "User role: "
            read NEW_USER_ROLE

            source {{aghome}}/bin/create_user.sh $NEW_USERNAME $NEW_PASSWORD $NEW_USER_ROLE

    create_user: |
            #!/bin/bash
            NEW_USERNAME=$1
            NEW_PASSWORD=$2
            NEW_USER_ROLE=$3

            source {{aghome}}/bin/create_mysql_user.sh $NEW_USERNAME $NEW_PASSWORD $NEW_USER_ROLE
            source {{aghome}}/bin/create_unix_user.sh $NEW_USERNAME
            source {{aghome}}/bin/create_hdfs_user.sh $NEW_USERNAME
            source {{aghome}}/bin/create_notebook_clone.sh $NEW_USERNAME $NEW_PASSWORD

  tasks:

   - name: "Create Scipt to export users"
     copy:
       owner: "{{zepuser}}"
       group: "{{zepuser}}"
       mode:  'u=rwx,g=rwx,o=rwx'
       dest:  "{{aghome}}/bin/export_users.sh"
       content: "{{ export_users }}"
     tags:
       - always

   - name: "Create Top-level script to add a new user"
     copy:
       owner: "{{zepuser}}"
       group: "{{zepuser}}"
       mode:  'u=rwx,g=rwx,o=rwx'
       dest:  "{{aghome}}/bin/add_user.sh"
       content: "{{ add_user }}"
     tags:
       - always

   - name: "Script to create a new user"
     copy:
       owner: "{{zepuser}}"
       group: "{{zepuser}}"
       mode:  'u=rwx,g=rwx,o=rwx'
       dest:  "{{aghome}}/bin/create_user.sh"
       content: "{{ create_user }}"
     tags:
       - always

   - name: "Script to add a unix user"
     copy:
       owner: "{{zepuser}}"
       group: "{{zepuser}}"
       mode:  'u=rwx,g=rwx,o=rwx'
       dest:  "{{aghome}}/bin/create_unix_user.sh"
       content: "{{ create_unix_user }}"
     tags:
       - always

   - name: "Script to create an HDFS user directory"
     copy:
       owner: "{{zepuser}}"
       group: "{{zepuser}}"
       mode:  'u=rwx,g=rwx,o=rwx'
       dest:  "{{aghome}}/bin/create_hdfs_user.sh"
       content: "{{ create_hdfs_user }}"
     tags:
       - always

   - name: "Script to create add a MySQL user"
     copy:
       owner: "{{zepuser}}"
       group: "{{zepuser}}"
       mode:  'u=rwx,g=rwx,o=rwx'
       dest:  "{{aghome}}/bin/create_mysql_user.sh"
       content: "{{ create_mysql_user }}"
     tags:
       - always

   - name: "Script to create a clone of the example notebooks"
     copy:
       owner: "{{zepuser}}"
       group: "{{zepuser}}"
       mode:  'u=rwx,g=rwx,o=rwx'
       dest:  "{{aghome}}/bin/create_notebook_clone.sh"
       content: "{{ create_notebook_clone }}"
     tags:
       - always

