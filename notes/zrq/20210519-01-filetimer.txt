#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2021, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#

    Target:

        Monitor the disc access timing.

    Result:

        Success - we have a simple test that gives us a feel for IO speed.

    references:

        Using dd to read the file as described here:
        https://www.systutorials.com/which-checksum-tool-on-linux-is-faster/


# -----------------------------------------------------
# Login to the live service master node
#[user@desktop]

    ssh zeppelin
        ssh master01


# -----------------------------------------------------
# Create our checksum timing loop
#[user@master01]

    timestep()
        {
        echo "----"
        date --iso-8601=s
        time -p dd if=${1} of=/dev/null
        sleep 20
        }

    pushd /data/gaia/edr3/GEDR3_11932_GAIASOURCE

        while true
        do
            for filename in $(ls -1)
            do
                timestep "${filename}"
            done
        done

    popd

    #
    # Better output because it gives us an estimate of the speed e.g. 68.0 MB/s
    #

    >   ....
    >   2021-05-19T02:49:14+00:00
    >   6093+1 records in
    >   6093+1 records out
    >   49920925 bytes (50 MB, 48 MiB) copied, 0.734488 s, 68.0 MB/s
    >   real 0.73
    >   user 0.00
    >   sys 0.01
    >   ----
    >   2021-05-19T02:49:34+00:00
    >   6100+1 records in
    >   6100+1 records out
    >   49978955 bytes (50 MB, 48 MiB) copied, 0.568442 s, 87.9 MB/s
    >   real 0.57
    >   user 0.00
    >   sys 0.01
    >   ----
    >   2021-05-19T02:49:55+00:00
    >   6087+1 records in
    >   6087+1 records out
    >   49871453 bytes (50 MB, 48 MiB) copied, 0.743754 s, 67.1 MB/s
    >   real 0.74
    >   user 0.00
    >   sys 0.01
    >   ----
    >   2021-05-19T02:50:16+00:00
    >   5984+1 records in
    >   5984+1 records out
    >   49023445 bytes (49 MB, 47 MiB) copied, 0.654963 s, 74.8 MB/s
    >   real 0.65
    >   user 0.00
    >   sys 0.01
    >   ----
    >   2021-05-19T02:50:36+00:00
    >   6035+1 records in
    >   6035+1 records out
    >   49444168 bytes (49 MB, 47 MiB) copied, 0.6519 s, 75.8 MB/s
    >   real 0.65
    >   user 0.00
    >   sys 0.01
    >   ....

    #
    # If we restart the loop, we get a higher data rate for recently used files.
    # Suggests a local cache somewhere in the chain ?
    #

    >   ....
    >   2021-05-19T02:57:20+00:00
    >   94949+1 records in
    >   94949+1 records out
    >   48614255 bytes (49 MB, 46 MiB) copied, 0.172655 s, 282 MB/s
    >   real 0.17
    >   user 0.03
    >   sys 0.07
    >   ----
    >   2021-05-19T02:57:40+00:00
    >   94781+1 records in
    >   94781+1 records out
    >   48527951 bytes (49 MB, 46 MiB) copied, 0.202753 s, 239 MB/s
    >   real 0.20
    >   user 0.02
    >   sys 0.08
    >   ----
    >   2021-05-19T02:58:00+00:00
    >   94968+1 records in
    >   94968+1 records out
    >   48623962 bytes (49 MB, 46 MiB) copied, 0.181615 s, 268 MB/s
    >   real 0.18
    >   user 0.02
    >   sys 0.09
    >   ----
    >   2021-05-19T02:58:20+00:00
    >   97060+1 records in
    >   97060+1 records out
    >   49694788 bytes (50 MB, 47 MiB) copied, 0.16723 s, 297 MB/s
    >   real 0.17
    >   user 0.02
    >   sys 0.08
    >   ....

    # (*) Also changed the block size this time, so the block count is different.
    # The speed up for recently used files always happens, nothing to do with the block size.
    #


