#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2021, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#


    Testing the current upstream master branch for deployment.
    In theory, nothing should have made it into the upstream master without being tested.
    In practice, we don't apply any formal acceptance testing before merging.

    I'd like to tag the current state of the upstream master branch, and then use that tag
    to refer to the state in discussions.

    At the moment live deployment comes from our local clone of our personal fork.
    Live deployment should be made based on content from a tag on the upstream master branch.

    Proposed process -

        On Monday we add a date formatted branch/tag to the upstream master repository.
        'YYYYMMYY-deploy' e.g. '20210726-deploy'
        Notes on how to do this TDB.

        On Tuesday we agree the specific branch/tag is ready to deploy, and the contents of the email to send to users.

            What will change for our users.
            What issue this fixes.

        On Wednesday 15:00-18:00 one of us checks out the branch/tag from the upstream master repository and deploys it.

            If it goes well, then we email to say all OK.
            If it doesn't go well, then we roll back to the previous tagged version.



# -----------------------------------------------------
# List our remotes.
#[user@desktop]

    source "${HOME:?}/aglais.env"
    pushd "${AGLAIS_CODE}"

        git remote -v

    >   origin	git@github.com:Zarquan/aglais.git (fetch)
    >   origin	git@github.com:Zarquan/aglais.git (push)
    >   upstream	git@github.com:wfau/aglais.git (fetch)
    >   upstream	git@github.com:wfau/aglais.git (push)


# -----------------------------------------------------
# Fetch the upstream changes.
#[user@desktop]

        git fetch upstream

        git merge upstream/master

        git push


    >   Updating 504dbd8..38a48db
    >   Fast-forward
    >    deployments/common/manila/datashares.yaml  |   76 ++++-
    >    notes/stv/20210715-multi-user-test-01.txt  |  346 +++++++++++++++++++++++
    >    notes/stv/20210716-master-tests.txt        |  439 +++++++++++++++++++++++++++++
    >    notes/zrq/20210622-02-medium-04-deploy.txt |   42 ++-
    >    notes/zrq/20210715-02-medium-04-deploy.txt | 1451 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    >    notes/zrq/20210716-01-git-rebase.txt       |  199 +++++++++++++
    >    notes/zrq/20210716-02-medium-04-deploy.txt | 1099 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    >    7 files changed, 3624 insertions(+), 28 deletions(-)
    >    create mode 100644 notes/stv/20210715-multi-user-test-01.txt
    >    create mode 100644 notes/stv/20210716-master-tests.txt
    >    create mode 100644 notes/zrq/20210715-02-medium-04-deploy.txt
    >    create mode 100644 notes/zrq/20210716-01-git-rebase.txt
    >    create mode 100644 notes/zrq/20210716-02-medium-04-deploy.txt


    >   Total 0 (delta 0), reused 0 (delta 0), pack-reused 0
    >   To github.com:Zarquan/aglais.git
    >      504dbd8..38a48db  master -> master


# -----------------------------------------------------
# List the remote branches we know about.
#[user@desktop]

        git checkout 'master'

        git branch -v -a

    >     20210113-zrq-source-build                                                              3156044 Build success
    >     20210702-zrq-infraops                                                                  b3973bb ....
    >     20210702-zrq-prometheus                                                                34b54ed format-notes
    >   * master                                                                                 38a48db Merge pull request #530 from stvoutsin/issue-multi-user
    >     remotes/origin/20201218-zrq-container-images                                           f6cc9d2 New year, new start
    >     remotes/origin/20210111-zrq-catalog-shares                                             e2241ab Adding catalog PV claims to Docker images
    >     ....
    >     ....
    >     ....
    >     remotes/origin/20210702-zrq-infraops                                                   b3973bb ....
    >     remotes/origin/20210702-zrq-prometheus                                                 34b54ed format-notes
    >     remotes/origin/20210713-zrq-crash-debug                                                6bb1bff Added target and results
    >     remotes/origin/20210716-zrq-test-deploy                                                28bb6da End to end test (without KinematicClustering)
    >     remotes/origin/HEAD                                                                    -> origin/master
    >     remotes/origin/master                                                                  38a48db Merge pull request #530 from stvoutsin/issue-multi-user
    >     remotes/upstream/dependabot/pip/experiments/stv/gdaf-openstack/config/cryptography-3.2 d6b07c3 Bump cryptography in /experiments/stv/gdaf-openstack/config
    >     remotes/upstream/dependabot/pip/experiments/stv/gdaf-openstack/config/jinja2-2.10.1    5f89583 Bump jinja2 in /experiments/stv/gdaf-openstack/config
    >     remotes/upstream/dependabot/pip/experiments/stv/gdaf-openstack/config/psutil-5.6.6     6e8adce Bump psutil in /experiments/stv/gdaf-openstack/config
    >     remotes/upstream/dependabot/pip/experiments/stv/gdaf-openstack/config/urllib3-1.24.2   4002a05 Bump urllib3 in /experiments/stv/gdaf-openstack/config
    >     remotes/upstream/master                                                                38a48db Merge pull request #530 from stvoutsin/issue-multi-....



# -----------------------------------------------------
# Create a new branch to work on.
#[user@desktop]

        deploybranch=$(date '+%Y%m%d')-zrq-deploy

        git checkout -b "${deploybranch}"

    >   Switched to a new branch '20210727-zrq-deploy'


# -----------------------------------------------------
# Push the branch to the upstream (WFAU) repository.
# https://stackoverflow.com/questions/1519006/how-do-you-create-a-remote-git-branch
# https://stackoverflow.com/a/1519032
#[user@desktop]

        git push --set-upstream upstream "${deploybranch}"

    >   Total 0 (delta 0), reused 0 (delta 0), pack-reused 0
    >   ....
    >   ....
    >   To github.com:wfau/aglais.git
    >    * [new branch]      20210727-zrq-deploy -> 20210727-zrq-deploy


# -----------------------------------------------------
# -----------------------------------------------------
# Checkout the target branch from the upstream (WFAU) repository.
#[user@desktop]

    deploybranch=20210727-zrq-deploy

    source "${HOME:?}/aglais.env"
    pushd "${AGLAIS_CODE}"

        git fetch upstream "${deploybranch:?}"

        git checkout "${deploybranch:?}"

    popd

    >   From github.com:wfau/aglais
    >    * branch            20210727-zrq-deploy -> FETCH_HEAD


    >   Switched to branch '20210727-zrq-deploy'
    >   Your branch is up to date with 'remotes/upstream/20210727-zrq-deploy'.


    #
    # This works, but we end up with a branch in the main repository.
    # There is a danger of accidentally pushing a commit to the WFAU
    # repository rather than our fork, breaking the fork-branch-pull
    # development pattern.
    #

# -----------------------------------------------------
# -----------------------------------------------------
# Delete the local and remote branches.
# https://www.freecodecamp.org/news/how-to-delete-a-git-branch-both-locally-and-remotely/
#[user@desktop]

    source "${HOME:?}/aglais.env"
    pushd "${AGLAIS_CODE}"

        git push upstream --delete '20210727-zrq-deploy'

    >   remote: error: GH006: Protected branch update failed for refs/heads/20210727-zrq-deploy.
    >   remote: error: Cannot delete this protected branch
    >   To github.com:wfau/aglais.git
    >    ! [remote rejected] 20210727-zrq-deploy (protected branch hook declined)
    >   error: failed to push some refs to 'git@github.com:wfau/aglais.git'

        #
        # Needed to update the branch protection settings.
        # https://github.com/wfau/aglais/settings/branch_protection_rules/19014524
        #
        # Allow deletions
        # [+] Allow users with push access to delete matching branches.
        #

        git push upstream --delete '20210727-zrq-deploy'

    >   To github.com:wfau/aglais.git
    >    - [deleted]         20210727-zrq-deploy


        #
        # Re-instated the branch protection settings.
        # https://github.com/wfau/aglais/settings/branch_protection_rules/19014524
        #
        # Allow deletions
        # [-] Allow users with push access to delete matching branches.
        #


        git branch -d '20210727-zrq-deploy'

    >   Deleted branch 20210727-zrq-deploy (was 38a48db).


# -----------------------------------------------------
# -----------------------------------------------------
# Create a tag in our local clone.
# https://stackoverflow.com/questions/11514075/what-is-the-difference-between-an-annotated-and-unannotated-tag
# https://stackoverflow.com/a/11514139
#[user@desktop]

    deploytag=$(date '+%Y%m%d')-zrq-deploy

    source "${HOME:?}/aglais.env"
    pushd "${AGLAIS_CODE}"

        git checkout master

        git tag -a -m "Deployment for 2021-07-27" "${deploytag:?}"

        git tag

    >   20210727-zrq-deploy


# -----------------------------------------------------
# Push the tag to the main WFAU repository.
# https://stackoverflow.com/questions/5195859/how-do-you-push-a-tag-to-a-remote-repository-using-git
# https://stackoverflow.com/a/5195913
#[user@desktop]

        git push upstream "${deploytag:?}"

    >   ....
    >   ....
    >   To github.com:wfau/aglais.git
    >    * [new tag]         20210727-zrq-deploy -> 20210727-zrq-deploy


# -----------------------------------------------------
# Delete the local tag (for testing).
#[user@desktop]

        git tag -d "${deploytag:?}"

    >   Deleted tag '20210727-zrq-deploy' (was 9b0333c)


# -----------------------------------------------------
# -----------------------------------------------------
# Fetch new tags from the upstream (WFAU) repository and checkout our deployment tag.
#[user@desktop]

    source "${HOME:?}/aglais.env"
    pushd "${AGLAIS_CODE}"

        git fetch upstream --tags

        git checkout '20210727-zrq-deploy'

    popd


    >   From github.com:wfau/aglais
    >    * [new tag]         20210727-zrq-deploy -> 20210727-zrq-deploy


    >   Note: switching to '20210727-zrq-deploy'.
    >
    >   You are in 'detached HEAD' state. You can look around, make experimental
    >   changes and commit them, and you can discard any commits you make in this
    >   state without impacting any branches by switching back to a branch.
    >
    >   ....
    >   ....
    >
    >   HEAD is now at 38a48db Merge pull request #530 from stvoutsin/issue-multi-user


# -----------------------------------------------------
# -----------------------------------------------------
# Create a new branch for test notes.
#[user@desktop]

    newbranch=20210727-zrq-deploy

    source "${HOME:?}/aglais.env"
    pushd "${AGLAIS_CODE}"

        git checkout master
        git checkout -b "${newbranch:?}"

        #
        # Deployment tests and notes
        #

        git push --set-upstream origin "${newbranch:?}"

    >   error: src refspec 20210727-zrq-deploy matches more than one
    >   error: failed to push some refs to 'git@github.com:Zarquan/aglais.git'

    #
    # We used the same name for the branch and the tag.
    # Rename the local branch before we push it ...
    #

        oldbranch=20210727-zrq-deploy
        newbranch=20210727-zrq-deploy-test

        git branch -m "${newbranch:?}"

        git push --set-upstream origin "${newbranch:?}"

    >   Enumerating objects: 9, done.
    >   Counting objects: 100% (9/9), done.
    >   Delta compression using up to 4 threads
    >   Compressing objects: 100% (6/6), done.
    >   Writing objects: 100% (6/6), 9.83 KiB | 1.97 MiB/s, done.
    >   Total 6 (delta 2), reused 0 (delta 0), pack-reused 0
    >   ....
    >   ....
    >   To github.com:Zarquan/aglais.git
    >    * [new branch]      20210727-zrq-deploy-test -> 20210727-zrq-deploy-test
    >   Branch '20210727-zrq-deploy-test' set up to track remote branch '20210727-zrq-deploy-test' from 'origin'.


