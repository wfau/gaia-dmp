#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2021, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#

    Target:

        Work on tools for Zeppelin REST API.

    Result:

        Work in progress ..



# -----------------------------------------------------
# Checkout this branch.
#[user@desktop]

    source "${HOME:?}/aglais.env"
    pushd "${AGLAIS_CODE}"

        git checkout '20210702-zrq-prometheus'

    popd

# -----------------------------------------------------
# Create a container to work with.
#[user@desktop]

    source "${HOME:?}/aglais.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --name ansibler \
        --hostname ansibler \
        --publish 3000:3000 \
        --publish 8088:8088 \
        --env "SSH_AUTH_SOCK=/mnt/ssh_auth_sock" \
        --volume "${SSH_AUTH_SOCK}:/mnt/ssh_auth_sock:rw,z" \
        --volume "${HOME:?}/clouds.yaml:/etc/openstack/clouds.yaml:ro,z" \
        --volume "${AGLAIS_CODE:?}/deployments:/deployments:ro,z" \
        atolmis/ansible-client:2020.12.02 \
        bash


# -----------------------------------------------------
# Set the target cloud.
#[root@ansibler]

    cloudname=gaia-dev


# -----------------------------------------------------
# -----------------------------------------------------

    #
    # Run through the deploy from previous notes ..
    # 20210727-01-medium-04-deploy.txt
    #

# -----------------------------------------------------
# -----------------------------------------------------
# Add the notebooks from github.
#[root@ansibler]

    # TODO This uses ssh to connect to the GitHub repo.
    # WARNING The automatic push is not included.
    # WARNING It requires one of us, with ssh-agent forwarding on, to do the push manually.
    # TODO Create a ssh key for Zeppelin and allow them access to the repo.
    # TODO Move the upstream repo to our infra-ops server.
    # TODO Include the server key for the upstream repo.

    ssh zeppelin

        pushd /home/fedora/zeppelin

            mv -b notebook \
               notebook-origin

            git clone git@github.com:wfau/aglais-notebooks.git  notebook

            pushd notebook
                git config user.name Zeppelin
                git config user.email zeppelin@aglais.uk
            popd

	        bin/zeppelin-daemon.sh restart

        popd
    exit


# -----------------------------------------------------
# -----------------------------------------------------
# Update our DNS entries.
#[root@ansibler]

    ssh-keyscan 'infra-ops.aglais.uk' >> "${HOME}/.ssh/known_hosts"

    ssh root@infra-ops.aglais.uk

        vi /var/aglais/dnsmasq/hosts/gaia-dev.hosts

        ~   128.232.227.158  zeppelin.gaia-dev.aglais.uk

        podman kill --signal SIGHUP dnsmasq

        podman logs dnsmasq | tail

        exit


# -----------------------------------------------------
# -----------------------------------------------------
# Login to our Zeppelin node and generate a new interpreter.json file.
#[root@ansibler]

    ssh zeppelin

        # TODO Add this to the Zeppelin node.
        # DONE
        sudo dnf -y install jq

        # Create a new list of interpreter bindings.
        find /home/fedora/zeppelin/notebook \
            -mindepth 1 \
            -maxdepth 1 \
            -type d \
            ! -name '.git' \
            -printf '%f\n' \
        | sed '
            1 i \
"interpreterBindings": {
        s/^\(.*\)$/"\1": ["spark", "md", "sh"]/
        $ ! s/^\(.*\)$/\1,/
        $ a \
},
            ' \
            | tee /tmp/bindings.json


    >   "interpreterBindings": {
    >   "2C35YU814": ["spark", "md", "sh"],
    >   "2EZ3MQG4S": ["spark", "md", "sh"],
    >   ....
    >   ....
    >   "2G9BXYCKP": ["spark", "md", "sh"],
    >   "2FF2VTAAM": ["spark", "md", "sh"]
    >   },


        # Replace the existing interpreter bindings.
        jq '
            del(.interpreterBindings[])
            ' \
        /home/fedora/zeppelin/conf/interpreter.json \
        | sed '
            /interpreterBindings/ {
                r /tmp/bindings.json
                d
                }
            ' \
        | jq '.' \
        | tee /tmp/interpreter-new.json

    >   {
    >     "interpreterSettings": {
    >     ....
    >     ....
    >     },
    >     "interpreterBindings": {
    >       "2C35YU814": [
    >         "spark",
    >         "md",
    >         "sh"
    >       ],
    >       ....
    >       ....
    >       "2FF2VTAAM": [
    >         "spark",
    >         "md",
    >         "sh"
    >       ]
    >     },
    >     "interpreterRepositories": [
    >     ....
    >     ....
    >     ]
    >   }
    >


    # Replace the original interpreter.json
    mv /home/fedora/zeppelin/conf/interpreter.json \
       /home/fedora/zeppelin/conf/interpreter.origin

    cp /tmp/interpreter-new.json \
       /home/fedora/zeppelin/conf/interpreter.json

    # Restart Zeppelin to take effect
    /home/fedora/zeppelin/bin/zeppelin-daemon.sh restart

    exit

    >   Zeppelin stop                                              [  OK  ]
    >   Zeppelin start                                             [  OK  ]


# -----------------------------------------------------
# -----------------------------------------------------
# Add our secret function to the ansibler container.
#[root@ansibler]

    # TODO Move this into the Ansible setup.
    # TODO Move our secrets onto our infra-ops server.

    if [ ! -e "${HOME}/bin" ]
    then
        mkdir "${HOME}/bin"
    fi

    cat > "${HOME}/bin/secret" << 'EOF'
ssh -n \
    'secretserver' \
    "bin/secret '${1}'"
EOF

    chmod u+x "${HOME}/bin/secret"


    if [ ! -e "${HOME}/.ssh" ]
    then
        mkdir "${HOME}/.ssh"
    fi

    # Fix for the out of date ssh server.
    # RSA key have been deprecated, so we need to explicitly allow them for now.
    # https://www.reddit.com/r/Fedora/comments/jh9iyi/f33_openssh_no_mutual_signature_algorithm/

    cat >> "${HOME}/.ssh/config" << 'EOF'
Host secretserver
  User     Zarquan
  Hostname data.metagrid.co.uk
  PubkeyAcceptedKeyTypes +ssh-rsa
EOF

    ssh-keyscan 'data.metagrid.co.uk' >> "${HOME}/.ssh/known_hosts"

    secret frog

    >   Green Frog


# -----------------------------------------------------
# -----------------------------------------------------
# Create shell script functions to wrap the REST API.
#[root@ansibler]

    # TODO Add this to the client container.
    dnf install -y datediff

    zeppelinhost=zeppelin.${cloudname:?}.aglais.uk
    zeppelinport=8080
    zeppelinurl="http://${zeppelinhost:?}:${zeppelinport:?}"

    zeplogin()
        {
        local username=${1:?}
        local password=${2:?}
        zepcookies=/tmp/${username:?}.cookies
        curl \
            --silent \
            --request 'POST' \
            --cookie-jar "${zepcookies:?}" \
            --data "userName=${username:?}" \
            --data "password=${password:?}" \
            "${zeppelinurl:?}/api/login" \
        | jq '.'
        }

    zepnbjsonfile()
        {
        local nbident=${1:?}
        echo "/tmp/${nbident:?}.json"
        }

    zepnbjsonclr()
        {
        local nbident=${1:?}
        local jsonfile=$(zepnbjsonfile ${nbident})
        if [ -f "${jsonfile}" ]
        then
            rm -f "${jsonfile}"
        fi
        }

    zepnbclear()
        {
        local nbident=${1:?}
        zepnbjsonclr ${nbident}
        curl \
            --silent \
            --request PUT \
            --cookie "${zepcookies:?}" \
            "${zeppelinurl:?}/api/notebook/${nbident:?}/clear" \
        | jq '.'
        }

    zepnbstatus()
        {
        local nbident=${1:?}
        zepnbjsonclr ${nbident}
        curl \
            --silent \
            --request GET \
            --cookie "${zepcookies:?}" \
            "${zeppelinurl:?}/api/notebook/${nbident:?}" \
        | jq '.' | tee $(zepnbjsonfile ${nbident}) | jq 'del(.body.paragraphs[])'
        }

    zepnbexecute()
        {
        local nbident=${1:?}
        zepnbjsonclr ${nbident}
        curl \
            --silent \
            --request POST \
            --cookie "${zepcookies:?}" \
            "${zeppelinurl:?}/api/notebook/job/${nbident:?}" \
        | jq '.'
        }


# -----------------------------------------------------
# Calculate the elapsed time for each paragraph.
#[root@ansibler]

    zepnbparatime()
        {
        local nbident=${1:?}

        cat $(zepnbjsonfile ${nbident}) \
        | sed '
            /"dateStarted": null,/d
            /"dateStarted":/ {
                h
                s/\([[:space:]]*\)"dateStarted":[[:space:]]*\("[^"]*"\).*$/\1\2/
                x
                }
            /"dateFinished": null,/ d
            /"dateFinished":/ {
                H
                x
                s/[[:space:]]*"dateFinished":[[:space:]]*\("[^"]*"\).*$/ \1/
                s/\([[:space:]]*\)\(.*\)/\1echo "\1\\"elapsedTime\\": \\"$(datediff --format "%H:%M:%S" --input-format "%b %d, %Y %H:%M:%S %p" \2)\\","/e
                x
                G
                }
            ' \
        | jq '
            .body.paragraphs[] | select(.results.code != null) | {
                title,
                result: .results.code,
                time:   .elapsedTime,
                }
            '
        }

# -----------------------------------------------------
# Calculate the elapsed time for the whole notebook.
#[root@ansibler]

    zepnbtotaltime()
        {
        local nbident=${1:?}
        local jsonfile=$(zepnbjsonfile ${nbident})

        local first=$(
            jq -r '
                [.body.paragraphs[] | select(.dateStarted != null) | .dateStarted] | first
                ' \
                "${jsonfile}"
            )

        local last=$(
            jq -r '
                [.body.paragraphs[] | select(.dateFinished != null) | .dateFinished] | last
                ' \
                "${jsonfile}"
            )

        datediff --format "%H:%M:%S" --input-format "%b %d, %Y %H:%M:%S %p" "${first}" "${last}"
        }

# -----------------------------------------------------
# Login to Zeppelin as a normal user.
#[root@ansibler]

    gaiauser=$(secret aglais.zeppelin.gaiauser)
    gaiapass=$(secret aglais.zeppelin.gaiapass)

    zeplogin "${gaiauser:?}" "${gaiapass}"

    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "principal": "gaiauser",
    >       "ticket": "8ae544c4-d370-4448-918e-08d456bea03e",
    >       "roles": "[\"user\"]"
    >     }
    >   }


# -----------------------------------------------------
# Run the SetUp notebook.
#[root@ansibler]

    noteid=2G7GZKWUH

    zepnbclear ${noteid}

    zepnbexecute ${noteid}

    zepnbstatus ${noteid}

    zepnbtotaltime ${noteid}

    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "paragraphs": [],
    >       "name": "/AglaisPublicExamples/SetUp",
    >       "id": "2G7GZKWUH",
    >       "noteParams": {},
    >       "noteForms": {},
    >       "angularObjects": {
    >         "md:shared_process": [],
    >         "spark:gaiauser:": []
    >       },
    >       "config": {
    >         "isZeppelinNotebookCronEnable": false
    >       },
    >       "info": {}
    >     }
    >   }

    >   0:18:4


# -----------------------------------------------------
# Run the HealpixSourceCounts notebook
#[root@ansibler]

    noteid=2FKJ25GVF

    zepnbclear ${noteid}

    zepnbexecute ${noteid}

    zepnbstatus ${noteid}

    zepnbparatime ${noteid}

    zepnbtotaltime ${noteid}

    >   {
    >     "title": null,
    >     "result": "SUCCESS",
    >     "time": "0:0:0"
    >   }
    >   {
    >     "title": "Set the resolution level and define the query",
    >     "result": "SUCCESS",
    >     "time": "0:0:1"
    >   }
    >   {
    >     "title": "Plot up the results",
    >     "result": "SUCCESS",
    >     "time": "0:0:27"
    >   }
    >   {
    >     "title": "Further reading and resources",
    >     "result": "SUCCESS",
    >     "time": "0:0:0"
    >   }

    >   0:0:28


# -----------------------------------------------------
# Run the MeanProperMotions notebook
#[root@ansibler]

    noteid=2G748GZSW

    zepnbclear ${noteid}

    zepnbexecute ${noteid}

    zepnbstatus ${noteid}

    zepnbparatime ${noteid}

    zepnbtotaltime ${noteid}

    >   {
    >     "title": "Set HEALPix resolution",
    >     "result": "SUCCESS",
    >     "time": "0:0:0"
    >   }
    >   {
    >     "title": "Define a data frame by SQL query",
    >     "result": "SUCCESS",
    >     "time": "0:0:0"
    >   }
    >   {
    >     "title": "Mean RA proper motion plot",
    >     "result": "SUCCESS",
    >     "time": "0:0:46"
    >   }
    >   {
    >     "title": "Mean Dec proper motion plot",
    >     "result": "SUCCESS",
    >     "time": "0:0:1"
    >   }
    >   {
    >     "title": "Further reading and resources",
    >     "result": "SUCCESS",
    >     "time": "0:0:0"
    >   }

    >   0:0:47


# -----------------------------------------------------
# Run the RandomForest notebook.
#[root@ansibler]

    noteid=2G5NU6HTK

    zepnbclear ${noteid}

    zepnbexecute ${noteid}

    zepnbstatus ${noteid}

    zepnbparatime ${noteid}

    zepnbtotaltime ${noteid}

    #
    # FAIL - got stuck during REST call
    #


# -----------------------------------------------------
# Experiment with per paragraph execution.
#[root@ansibler]


    # Full detail, including data
    curl \
        --silent \
        --request GET \
        --cookie "${zepcookies:?}" \
        "${zeppelinurl:?}/api/notebook/${noteid:?}" \
    | jq '.'

    # Minimal detail, no title
    curl \
        --silent \
        --request GET \
        --cookie "${zepcookies:?}" \
        "${zeppelinurl:?}/api/notebook/job/${noteid:?}" \
    | jq '.'



    # List skipping results
    cat $(zepnbjsonfile ${noteid}) \
    | jq 'del(.body.paragraphs[].results.msg[])'

    >   jq: error (at <stdin>:757): Cannot iterate over null (null)


    # Use 'try' to avoid null arrays
    cat $(zepnbjsonfile ${noteid}) \
    | jq 'del(.body.paragraphs[] | try .results.msg[])'


    # Use '?' to avoid null arrays
    cat $(zepnbjsonfile ${noteid}) \
    | jq 'del(.body.paragraphs[]?.results.msg[]?)'

    # Select [TEXT] results.
    cat $(zepnbjsonfile ${noteid}) \
    | jq '.body.paragraphs[]?.results.msg[]? | select(.type == "TEXT")'

    # Everything apart from [not TEXT] results.
    cat $(zepnbjsonfile ${noteid}) \
    | jq 'del(.body.paragraphs[]?.results.msg[]? | select(.type != "TEXT"))'


    # List the title, status and ident.
    cat $(zepnbjsonfile ${noteid}) \
    | jq '[.body.paragraphs[]? | {id, status, title}]' \
    | tee '/tmp/tistid.json'


    # Iterate the idents.
    for ident in $(
        jq -r '.id' '/tmp/tistid.json'
        )
    do
        echo "Para [${ident:?}]"
    done

    jq 'select(.id == "20201125-163312_728555601")' '/tmp/tistid.json'



    # For each paragraph
    jq -r '.[] | @text' '/tmp/tistid.json' \
    | while read line
        do
            paraid=$(jq -r '.id' <<< "${line}")
            title=$(jq -r '.title' <<< "${line}")
            status=$(jq -r '.status' <<< "${line}")
            echo "Para [${paraid}][${title}]"
            curl \
                --silent \
                --request GET \
                --cookie "${zepcookies:?}" \
                "${zeppelinurl:?}/api/notebook/run/${noteid}/${paraid}" \
            | tee "/tmp/para-${paraid}.json" \
            | jq '.'
        done




