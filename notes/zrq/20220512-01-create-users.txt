#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2022, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#

    Target:

        Prototyping create user functions.

    Result:

        Work in progress

# -----------------------------------------------------


    #
    # Example YAML ..
    #

    - name: "albert"
      uid:  2049,
      uuid: "7ac3dc18-f53c-4076-88b2-bcf4171d5b76",
      home: "/home/albert",
      data: "/user/albert"
      pass:
          hash: "148518cb-1dc5-49df-a1b2-42cec8a3e547"


    create-user

        If any of them are empty, they are created.
        Script output is the updated account.


    get the next available uid
    # https://www.commandlinefu.com/commands/view/5684/determine-next-available-uid
    getent passwd | awk -F: '($3>600) && ($3<60000) && ($3>maxuid) { maxuid=$3; } END { print maxuid+1; }'


    yq '.[]  | split_doc ' \
        /deployments/common/users/test-users.yml

    >   name: "Nelia"
    >   uid: 2050
    >   uuid: "5cf0cf95-157e-4a40-b95e-b163f22c2d92"
    >   home: "/home/Nelia"
    >   data: "/user/Nelia"
    >   pass: "SaiH2pad Uwaw2chu"
    >   ---
    >   name: "Ghoria"
    >   uid: 2051
    >   uuid: "237983b5-a21f-47c8-8fb3-80cbbc70ba56"
    >   home: "/home/Ghoria"
    >   data: "/user/Ghoria"
    >   pass: "<secret>"
    >   ---
    >   name: "Nalla"
    >   uid: 2052
    >   uuid: "65c7aeb1-3c2a-43b7-acc0-8c4497997c70"
    >   home: "/home/Nalla"
    >   data: "/user/Nalla"
    >   pass: ""
    >   ---
    >   name: "Wenia"
    >   uid: 2053

    #
    # Split input into bolcks ..
    # https://raymii.org/s/tutorials/Bash_bits_split_a_file_in_blocks_and_do_something_with_each_block.html

    OLDIFS=$IFS;
    IFS="@"

    for block in $(
        yq '.[]  | split_doc ' \
            /deployments/common/users/test-users.yml \
        | sed "s/^---/@/"
        )
    do
        echo "${block}"
    done
    IFS=$OLDIFS

    #
    # Sed execute option
    # https://unix.stackexchange.com/questions/48325/how-to-embed-a-shell-command-into-a-sed-expression

    printblock()
        {
        local block=${1:?}
        echo ""
        echo "========"
        echo ${block}
        echo "========"
        echo ""
        }

    export -f printblock

    yq '.[]  | split_doc ' \
        /deployments/common/users/test-users.yml \
    | sed -n '
        1 i ---
        $ a ---
        /---/,/---/ {
            s/\(.*\)/printblock "\1"/e
            }
        '

    yq '.[]  | split_doc ' \
        /deployments/common/users/test-users.yml \
    | sed "
        s/\"/'/g
        " \
    | sed -n '
        $ a ---
        /^---/! {
            H
            }
        /^---/ {
            g
            s/\(.*\)/printblock "\1"/ep
            }
        '

    #
    # Try using yq to convert to json, and then parse that.


    yq -I 0 -o json '.[]' \
        /deployments/common/users/test-users.yml

    >   {"name":"Nelia","uid":2050,"uuid":"5cf0cf95-157e-4a40-b95e-b163f22c2d92","home":"/home/Nelia","data":"/user/Nelia","pass":"SaiH2pad Uwaw2chu"}
    >   {"name":"Ghoria","uid":2051,"uuid":"237983b5-a21f-47c8-8fb3-80cbbc70ba56","home":"/home/Ghoria","data":"/user/Ghoria","pass":"<secret>"}
    >   {"name":"Nalla","uid":2052,"uuid":"65c7aeb1-3c2a-43b7-acc0-8c4497997c70","home":"/home/Nalla","data":"/user/Nalla","pass":""}
    >   {"name":"Wenia","uid":2053}
    >   {"name":"Ava"}


    for userinfo in $(
        yq -I 0 -o json '.[]' \
            /deployments/common/users/test-users.yml
        )
    do
        echo "========"
        name=$(jq '.name' <<< "${userinfo}")
        echo "name [${name}]"
        echo "========"
    done



    for userinfo in $(
        yq -I 0 -o json '.[]' \
            /deployments/common/users/test-users.yml
        )
    do
        echo "========"
        name=$(jq --argjson foo "${userinfo}" '$foo | .name')
        echo "name [${name}]"
        echo "========"
    done

    #
    # Passing JSON string into jq.
    # https://stackoverflow.com/a/47106137

    testjson='{"name":"Nelia","uid":2050,"uuid":"5cf0cf95-157e-4a40-b95e-b163f22c2d92","home":"/home/Nelia","data":"/user/Nelia","pass":"SaiH2pad Uwaw2chu"}'

    jq -n --argjson data "$testjson" '$data.name'


    for userinfo in $(
        yq -I 0 -o json '.[]' \
            /deployments/common/users/test-users.yml
        )
    do
        echo "========"
        echo "${userinfo}"
        echo "========"
        name=$(jq -n --argjson user "${userinfo}" '$user.name')
        uuid=$(jq -n --argjson user "${userinfo}" '$user.uuid')
        echo "name [${name}]"
        echo "uuid [${uuid}]"
        echo "========"
    done

    >   ========
    >   jq: invalid JSON text passed to --argjson
    >   Use jq --help for help with command-line options,
    >   or see the jq manpage, or online docs  at https://stedolan.github.io/jq
    >   jq: invalid JSON text passed to --argjson
    >   Use jq --help for help with command-line options,
    >   or see the jq manpage, or online docs  at https://stedolan.github.io/jq
    >   name []
    >   uuid []
    >   ========
    >   ========
    >   jq: invalid JSON text passed to --argjson
    >   Use jq --help for help with command-line options,
    >   or see the jq manpage, or online docs  at https://stedolan.github.io/jq
    >   jq: invalid JSON text passed to --argjson
    >   Use jq --help for help with command-line options,
    >   or see the jq manpage, or online docs  at https://stedolan.github.io/jq
    >   name []
    >   uuid []
    >   ========
    >   ========
    >   name ["Ghoria"]
    >   uuid ["237983b5-a21f-47c8-8fb3-80cbbc70ba56"]
    >   ========
    >   ========
    >   name ["Nalla"]
    >   uuid ["65c7aeb1-3c2a-43b7-acc0-8c4497997c70"]
    >   ========
    >   ========
    >   name ["Wenia"]
    >   uuid [null]
    >   ========
    >   ========
    >   name ["Ava"]
    >   uuid [null]
    >   ========

    #
    # Fails because the for next loop is breaking on spaces, not because jq isn't parsing the JSON.
    # https://stackoverflow.com/a/47775590
    #

    for userinfo in $(
        yq -I 0 -o json '.[]' \
            /deployments/common/users/test-users.yml
        )
    do
        echo "========"
        echo "${userinfo}"
        echo "========"
        name=$(jq -n --argjson user "${userinfo}" '$user.name')
        uuid=$(jq -n --argjson user "${userinfo}" '$user.uuid')
        echo "name [${name}]"
        echo "uuid [${uuid}]"
        echo "========"
    done


    #
    # Set IFS to just newline
    # https://askubuntu.com/a/344418

    IFS=$'\n'
    for userinfo in $(
        yq -I 0 -o json '.[]' \
            /deployments/common/users/test-users.yml
        )
    do
        echo "========"
        echo "${userinfo}"
        echo "========"
    done
    unset IFS

    #
    # Use read instead
    # https://askubuntu.com/a/1044537
    while read -r userinfo
    do
        echo "========"
        echo "${userinfo}"
        echo "========"
    done <<< $(
        yq -I 0 -o json '.[]' \
            /deployments/common/users/test-users.yml
        )


    >   ========
    >   {"name":"Nelia","uid":2050,"uuid":"5cf0cf95-157e-4a40-b95e-b163f22c2d92","home":"/home/Nelia","data":"/user/Nelia","pass":"SaiH2pad Uwaw2chu"}
    >   ========
    >   ========
    >   {"name":"Ghoria","uid":2051,"uuid":"237983b5-a21f-47c8-8fb3-80cbbc70ba56","home":"/home/Ghoria","data":"/user/Ghoria","pass":"<secret>"}
    >   ========
    >   ========
    >   {"name":"Nalla","uid":2052,"uuid":"65c7aeb1-3c2a-43b7-acc0-8c4497997c70","home":"/home/Nalla","data":"/user/Nalla","pass":""}
    >   ========
    >   ========
    >   {"name":"Wenia","uid":2053}
    >   ========
    >   ========
    >   {"name":"Ava"}
    >   ========

    #
    # Putting it together ...

    while read -r userinfo
    do
        echo "========"
        name=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.name')
        uuid=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.uuid')
        echo "name [${name}]"
        echo "uuid [${uuid}]"
        echo "========"
    done <<< $(
        yq -I 0 -o json '.[]' \
            /deployments/common/users/test-users.yml
        )

    >   ========
    >   name ["Nelia"]
    >   uuid ["5cf0cf95-157e-4a40-b95e-b163f22c2d92"]
    >   ========
    >   ========
    >   name ["Ghoria"]
    >   uuid ["237983b5-a21f-47c8-8fb3-80cbbc70ba56"]
    >   ========
    >   ========
    >   name ["Nalla"]
    >   uuid ["65c7aeb1-3c2a-43b7-acc0-8c4497997c70"]
    >   ========
    >   ========
    >   name ["Wenia"]
    >   uuid [null]
    >   ========
    >   ========
    >   name ["Ava"]
    >   uuid [null]
    >   ========


    #
    # Returning empty value rather than 'null'
    # https://github.com/stedolan/jq/issues/354#issuecomment-43147898

    while read -r userinfo
    do
        echo "========"
        name=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.name // empty')
        uuid=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.uuid // empty')
        echo "name [${name}]"
        echo "uuid [${uuid}]"
        echo "========"
    done <<< $(
        yq -I 0 -o json '.[]' \
            /deployments/common/users/test-users.yml
        )

    >   ========
    >   name [Nelia]
    >   uuid [5cf0cf95-157e-4a40-b95e-b163f22c2d92]
    >   ========
    >   ========
    >   name [Ghoria]
    >   uuid [237983b5-a21f-47c8-8fb3-80cbbc70ba56]
    >   ========
    >   ========
    >   name [Nalla]
    >   uuid [65c7aeb1-3c2a-43b7-acc0-8c4497997c70]
    >   ========
    >   ========
    >   name [Wenia]
    >   uuid []
    >   ========
    >   ========
    >   name [Ava]
    >   uuid []
    >   ========


    #
    # Adding a test for empty values.

    while read -r userinfo
    do
        echo "========"
        name=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.name // empty')
        uuid=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.uuid // empty')
        if [ -z "${uuid}" ]
        then
            uuid='new uuid'
        fi
        echo "name [${name}]"
        echo "uuid [${uuid}]"
        echo "========"
    done <<< $(
        yq -I 0 -o json '.[]' \
            /deployments/common/users/test-users.yml
        )

    >   ========
    >   name [Nelia]
    >   uuid [5cf0cf95-157e-4a40-b95e-b163f22c2d92]
    >   ========
    >   ========
    >   name [Ghoria]
    >   uuid [237983b5-a21f-47c8-8fb3-80cbbc70ba56]
    >   ========
    >   ========
    >   name [Nalla]
    >   uuid [65c7aeb1-3c2a-43b7-acc0-8c4497997c70]
    >   ========
    >   ========
    >   name [Wenia]
    >   uuid [new uuid]
    >   ========
    >   ========
    >   name [Ava]
    >   uuid [new uuid]
    >   ========

    #
    # Add a local secret function that users a YAML file for data.

    secretfile=$(mktemp)

    cat > "${secretfile}" << EOF
users:
  passhash:
    "Nelia":  "Hash of Nelia's password"
    "Ghoria": "Hash of Ghoria's password"
    "Nalla":  "Hash of Nalla's password"
EOF

    getpasshash()
        {
        local key=${1:?}
        yq '
           .users.passhash.'${key}'
           ' "${secretfile}"
        }

    getpasshash 'Nelia'

    >   Hash of Nelia's password

    #
    # Adding a password lookup.

    while read -r userinfo
    do
        name=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.name // empty')
        uuid=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.uuid // empty')
        pass=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.pass // empty')
        if [ -z "${uuid}" ]
        then
            uuid='new uuid'
        fi
        if [ -z "${pass}" ]
        then
            pass='new password'
        elif [ "${pass}" == '<secret>' ]
        then
            pass=$(getpasshash "${name}")
        fi
        echo "name [${name}]"
        echo "uuid [${uuid}]"
        echo "pass [${pass}]"
        echo ""
    done <<< $(
        yq -I 0 -o json '.[]' \
            /deployments/common/users/test-users.yml
        )

    >   name [Nelia]
    >   uuid [5cf0cf95-157e-4a40-b95e-b163f22c2d92]
    >   pass [Nelia's password]
    >
    >   name [Ghoria]
    >   uuid [237983b5-a21f-47c8-8fb3-80cbbc70ba56]
    >   pass [Hash of Ghoria's password]
    >
    >   name [Nalla]
    >   uuid [65c7aeb1-3c2a-43b7-acc0-8c4497997c70]
    >   pass [new password]
    >
    >   name [Wenia]
    >   uuid [new uuid]
    >   pass [new password]
    >
    >   name [Ava]
    >   uuid [new uuid]
    >   pass [new password]

    #
    # For real users we store their hashed passwords.
    # So real-users.yml will never store passwords in plain text.
    # For test users, our tests need to know the password to be able to use it.
    # So test-users.yml will contain passwords in plain text.
    #
    # The decider is if the user is a test user or not ...
    # If the password is blank, always check for a hash, if it is still emoty, generate a new one.
    #
    # What could possibly go wrong ...
    # A badguy edits real-users.yml and sets the password.
    #     Blocking the actual user from accessing the site.
    #     Updating to the hacked value when the site is re-deployed.
    #     Very bad
    #
    # Don't use passwords from real-users.yml or test-users.yml.
    # Always check for a hash.
    # If there is no hash, generate a new password.
    #
    # Real users will always have a hash.
    # Test users won't have a hash, so they get generated passwords.
    #
    # If we want, we can override the getpasshash function on a test deployment
    # to use a separate database of hashes for test users.
    #
    # A plan .. :-)
    #

    while read -r userinfo
    do
        name=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.name // empty')
        uuid=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.uuid // empty')
        pass=$(getpasshash "${name}")

        if [ -z "${uuid}" ]
        then
            uuid='new uuid'
        fi
        if [ -z "${pass}" ]
        then
            pass='new password'
        fi
        echo "name [${name}]"
        echo "uuid [${uuid}]"
        echo "pass [${pass}]"
        echo ""
    done <<< $(
        yq -I 0 -o json '.[]' \
            /deployments/common/users/test-users.yml
        )

    >   name [Nelia]
    >   uuid [5cf0cf95-157e-4a40-b95e-b163f22c2d92]
    >   pass [Hash of Nelia's password]
    >
    >   name [Ghoria]
    >   uuid [237983b5-a21f-47c8-8fb3-80cbbc70ba56]
    >   pass [Hash of Ghoria's password]
    >
    >   name [Nalla]
    >   uuid [65c7aeb1-3c2a-43b7-acc0-8c4497997c70]
    >   pass [Hash of Nalla's password]
    >
    >   name [Wenia]
    >   uuid [new uuid]
    >   pass [null]
    >
    >   name [Ava]
    >   uuid [new uuid]
    >   pass [null]

    #
    # Fix getpasshash to return '-' if there is no password.
    # https://mikefarah.gitbook.io/yq/operators/alternative-default-value

    getpasshash()
        {
        local key=${1:?}
        yq '
           .users.passhash.'${key}' // "-"
           ' "${secretfile}"
        }

    getpasshash 'Nelia'

    >   Hash of Nelia's password

    getpasshash 'Frog'

    >   -


    #
    # Add a check for specific value, '-', to generate a new password.

    while read -r userinfo
    do
        name=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.name // empty')
        uuid=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.uuid // empty')
        pass=$(getpasshash "${name}")

        if [ -z "${uuid}" ]
        then
            uuid='new uuid'
        fi
        if [ "${pass}" == '-' ]
        then
            pass='new password'
        fi
        echo "name [${name}]"
        echo "uuid [${uuid}]"
        echo "pass [${pass}]"
        echo ""
    done <<< $(
        yq -I 0 -o json '.[]' \
            /deployments/common/users/test-users.yml
        )


    >   name [Nelia]
    >   uuid [5cf0cf95-157e-4a40-b95e-b163f22c2d92]
    >   pass [Hash of Nelia's password]
    >
    >   name [Ghoria]
    >   uuid [237983b5-a21f-47c8-8fb3-80cbbc70ba56]
    >   pass [Hash of Ghoria's password]
    >
    >   name [Nalla]
    >   uuid [65c7aeb1-3c2a-43b7-acc0-8c4497997c70]
    >   pass [Hash of Nalla's password]
    >
    >   name [Wenia]
    >   uuid [new uuid]
    >   pass [new password]
    >
    >   name [Ava]
    >   uuid [new uuid]
    >   pass [new password]


    #
    # For real users, we only know the password hash.
    # The password hash is used to populate the Shro database at deployment.
    #
    # For new users, we only know the password hash.
    # The password hash is used to insert the new users into the Shro database.
    #
    # For test users, our tests need to know the actual password,
    # but we stll send the hashed value to the server.
    #
    # So we do the hashing on the client, not on the server ?
    #

    while read -r userinfo
    do
        name=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.name // empty')
        uuid=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.uuid // empty')
        hash=$(getpasshash "${name}")
        pass='-'

        if [ -z "${uuid}" ]
        then
            uuid='new uuid'
        fi
        if [ "${hash}" == '-' ]
        then
            hash='new password hash'
            pass='new password'
        fi

        echo "name [${name}]"
        echo "uuid [${uuid}]"
        echo "hash [${hash}]"
        echo "pass [${pass}]"
        echo ""
    done <<< $(
        yq -I 0 -o json '.[]' \
            /deployments/common/users/test-users.yml
        )


    #
    # Looking good.
    # Now we move the password hash function to long lived VM on the data project.
    #

    datahost=128.232.222.153
    datauser=fedora

    ssh "${datauser}@${datahost}"

        sudo dnf install -y wget
        sudo wget -O '/usr/bin/yq' 'https://github.com/mikefarah/yq/releases/download/v4.25.1/yq_linux_amd64'
        sudo chmod a+x '/usr/bin/yq'

        cat > '/home/fedora/passhashes' << EOF
users:
  passhash:
    "Nelia":  "Hash of Nelia's password"
    "Ghoria": "Hash of Ghoria's password"
    "Nalla":  "Hash of Nalla's password"
EOF

        mkdir /home/fedora/bin

        cat > /home/fedora/bin/getpasshash << 'EOF'
#!/bin/sh
key=${1:?}
yq '
    .users.passhash.'${key}' // "-"
    ' '/home/fedora/passhashes'
EOF

        chmod u+x,g+x /home/fedora/bin/getpasshash

    getpasshash 'Nelia'

    >   Hash of Nelia's password

    getpasshash 'Frog'

    >   -

    #
    # Update our local passhash function to use the remote one.
    #

    getpasshash()
        {
        local key=${1:?}
        datahost=128.232.222.153
        datauser=fedora

        ssh "${datauser}@${datahost}" \
            "
            getpasshash '${key:?}'
            "
        }

    getpasshash 'Nelia'

    >   Hash of Nelia's password


    getpasshash 'Frog'

    >   -

    #
    # Check the rest still works ...
    #

    while read -r userinfo
    do
        name=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.name // empty')
        uuid=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.uuid // empty')
        hash=$(getpasshash "${name}")
        pass='-'

        if [ -z "${uuid}" ]
        then
            uuid='new uuid'
        fi
        if [ "${hash}" == '-' ]
        then
            hash='new password hash'
            pass='new password'
        fi

        echo "name [${name}]"
        echo "uuid [${uuid}]"
        echo "hash [${hash}]"
        echo "pass [${pass}]"
        echo ""
    done <<< $(
        yq -I 0 -o json '.[]' \
            /deployments/common/users/test-users.yml
        )

    >   name [Nelia]
    >   uuid [5cf0cf95-157e-4a40-b95e-b163f22c2d92]
    >   hash [Hash of Nelia's password]
    >   pass [-]

    #
    # ... and the list is truncated :-(
    #
    # I remember this from previous encounter - something to do with ssh eating all the available input.
    #
    # GoogleFoo:
    # SSH eats stdin of while loop
    # https://www.chengweiyang.cn/2014/09/25/SSH-eat-stdin-of-while-loop/
    #
    # Just add -n
    #

    getpasshash()
        {
        local key=${1:?}
        datahost=128.232.222.153
        datauser=fedora

        ssh -n "${datauser}@${datahost}" \
            "
            getpasshash '${key:?}'
            "
        }


    while read -r userinfo
    do
        name=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.name // empty')
        uuid=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.uuid // empty')
        hash=$(getpasshash "${name}")
        pass='-'

        if [ -z "${uuid}" ]
        then
            uuid='new uuid'
        fi
        if [ "${hash}" == '-' ]
        then
            hash='new password hash'
            pass='new password'
        fi

        echo "name [${name}]"
        echo "uuid [${uuid}]"
        echo "hash [${hash}]"
        echo "pass [${pass}]"
        echo ""
    done <<< $(
        yq -I 0 -o json '.[]' \
            /deployments/common/users/test-users.yml
        )

    >   name [Nelia]
    >   uuid [5cf0cf95-157e-4a40-b95e-b163f22c2d92]
    >   hash [Hash of Nelia's password]
    >   pass [-]
    >
    >   name [Ghoria]
    >   uuid [237983b5-a21f-47c8-8fb3-80cbbc70ba56]
    >   hash [Hash of Ghoria's password]
    >   pass [-]
    >
    >   name [Nalla]
    >   uuid [65c7aeb1-3c2a-43b7-acc0-8c4497997c70]
    >   hash [Hash of Nalla's password]
    >   pass [-]
    >
    >   name [Wenia]
    >   uuid [new uuid]
    >   hash [new password hash]
    >   pass [new password]
    >
    >   name [Ava]
    >   uuid [new uuid]
    >   hash [new password hash]
    >   pass [new password]


    #
    # OK, so let's add the password hasher to the mix ..
    #

    dnf install -y java-latest-openjdk-headless

    mkdir "${HOME}/lib"
    pushd "${HOME}/lib"

        wget https://repo1.maven.org/maven2/org/apache/shiro/tools/shiro-tools-hasher/1.9.0/shiro-tools-hasher-1.9.0-cli.jar
        ln -s shiro-tools-hasher-1.9.0-cli.jar shiro-tools-hasher.jar

    popd

    testpass='bee6Aud7 aCu9uo5g'
    java -jar "${HOME}/lib/shiro-tools-hasher.jar" -i 500000 -f shiro1 -a SHA-256 -gss 128 '${testpass:?}'

    >   $shiro1$SHA-256$500000$HNgc433MMf+w01YqmW20yA==$FiUVKsjTBZDywvVE19vq3ZaEOzA/NEv8WAkckwvLiCg=

    #
    # Wrap it as a function
    #

    newpasshash()
        {
        local password="${1:?}"
        java -jar "${HOME}/lib/shiro-tools-hasher.jar" -i 500000 -f shiro1 -a SHA-256 -gss 128 '${password:?}'
        }

    newpasshash "${testpass}"

    >   $shiro1$SHA-256$500000$g3uc+AQWTWHeqdJTh7R/wQ==$M7/t5eBHiD9RiAw1FFQ52AdJwxN/WPSADnUQZSxt+J4=

    #
    # Putting it all together ..
    #

    while read -r userinfo
    do
        name=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.name // empty')
        uuid=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.uuid // empty')
        hash=$(getpasshash "${name}")
        pass='-'

        if [ -z "${uuid}" ]
        then
            uuid=$(
                uuidgen
                )
        fi
        if [ "${hash}" == '-' ]
        then
            pass=$(
                pwgen 30 1
                )
            hash=$(
                newpasshash "${pass}"
                )
        fi

        echo "name [${name}]"
        echo "uuid [${uuid}]"
        echo "hash [${hash}]"
        echo "pass [${pass}]"
        echo ""
    done <<< $(
        yq -I 0 -o json '.[]' \
            /deployments/common/users/test-users.yml
        )

    >   name [Nelia]
    >   uuid [5cf0cf95-157e-4a40-b95e-b163f22c2d92]
    >   hash [Hash of Nelia's password]
    >   pass [-]
    >
    >   name [Ghoria]
    >   uuid [237983b5-a21f-47c8-8fb3-80cbbc70ba56]
    >   hash [Hash of Ghoria's password]
    >   pass [-]
    >
    >   name [Nalla]
    >   uuid [65c7aeb1-3c2a-43b7-acc0-8c4497997c70]
    >   hash [Hash of Nalla's password]
    >   pass [-]
    >
    >   name [Wenia]
    >   uuid [73a222f6-fea9-4563-a841-b016a56fac91]
    >   hash [$shiro1$SHA-256$500000$jnPMssW5kkCFXR57DATEOA==$pZXs45oe1z9fsKZEi9LqrOzM6Lr/DWxb0sQ3CupdQLI=]
    >   pass [ooPheem5noodaeBepoofiereejoo7o]
    >
    >   name [Ava]
    >   uuid [3b6c9340-8d98-4c82-a434-14846e53f1fc]
    >   hash [$shiro1$SHA-256$500000$TYIhwOV6fY6hk9f+L2GFaA==$EhryHokWxdPT9C83vFjA2CFM8G1oNlsPDSk+Nc6K8KA=]
    >   pass [zuf1peish3ohL9eingielio2aezu3k]

    #
    # Make the source configurable ...
    #

    source=/deployments/common/users/test-users.yml

    yq -I 0 -o json '.[]' \
        "${source}"

    >   {"name":"Nelia","uid":2050,"uuid":"5cf0cf95-157e-4a40-b95e-b163f22c2d92","home":"/home/Nelia","data":"/user/Nelia","pass":"Nelia's password"}
    >   {"name":"Ghoria","uid":2051,"uuid":"237983b5-a21f-47c8-8fb3-80cbbc70ba56","home":"/home/Ghoria","data":"/user/Ghoria","pass":"<secret>"}
    >   {"name":"Nalla","uid":2052,"uuid":"65c7aeb1-3c2a-43b7-acc0-8c4497997c70","home":"/home/Nalla","data":"/user/Nalla","pass":""}
    >   {"name":"Wenia","uid":2053}
    >   {"name":"Ava"}

    testusers=$(mktemp)
    cat > "${testusers}" << EOF
- name: "Lacey"
  uuid: "dfbda6b5-a70b-4954-8543-c5fded6666f7"
  uid:  2050
- name: "Yasmin"
  uuid: "3c252b4c-6ba8-4592-835b-3352b0a6bab6"
  uid:  2051
- name: "Eleanor"
- name: "Niamh"
EOF

    yq -I 0 -o json '.[]' \
        "${testusers}"

    >   {"name":"Lacey","uuid":"dfbda6b5-a70b-4954-8543-c5fded6666f7","uid":2050}
    >   {"name":"Yasmin","uuid":"3c252b4c-6ba8-4592-835b-3352b0a6bab6","uid":2051}
    >   {"name":"Eleanor"}
    >   {"name":"Niamh"}


    while read -r userinfo
    do
        name=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.name // empty')
        uuid=$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.uuid // empty')
        hash=$(getpasshash "${name}")
        pass='-'

        if [ -z "${uuid}" ]
        then
            uuid=$(
                uuidgen
                )
        fi
        if [ "${hash}" == '-' ]
        then
            pass=$(
                pwgen 30 1
                )
            hash=$(
                newpasshash "${pass}"
                )
        fi

        echo "name [${name}]"
        echo "uuid [${uuid}]"
        echo "hash [${hash}]"
        echo "pass [${pass}]"
        echo ""
    done <<< $(
        yq -I 0 -o json '.[]' \
            "${testusers}"
        )

    >   name [Lacey]
    >   uuid [dfbda6b5-a70b-4954-8543-c5fded6666f7]
    >   hash [$shiro1$SHA-256$500000$evAezndmljL1CCzk5I8jEw==$l7qwYH96PUHENcK4rsli1ReybBmehbEiK+yELsKcob0=]
    >   pass [Eel9Ang7xie4loohoov3weseecei7u]
    >
    >   name [Yasmin]
    >   uuid [3c252b4c-6ba8-4592-835b-3352b0a6bab6]
    >   hash [$shiro1$SHA-256$500000$mutGJcwv+F4zBCUaPRb4dA==$RJTg4aYa5qWV1X4L+HOKXDl3WkaO9nY1Bo7AwpvSp74=]
    >   pass [eibohvaochohCha8Cheup8Fae7AW5i]
    >
    >   name [Eleanor]
    >   uuid [a25fc878-4509-4db2-995b-3c0d5badf236]
    >   hash [$shiro1$SHA-256$500000$oFsyldNu+z3kHXsQRC9+xg==$DPRzhaDvHeN0Wd5IGnvUtn1dGgHNEvsi+xDzLpuuzwU=]
    >   pass [cee3eoth8tahHazahNee8eip2ohsh7]
    >
    >   name [Niamh]
    >   uuid [377c4a8b-d022-43f2-b453-a6adcab17027]
    >   hash [$shiro1$SHA-256$500000$hVa791lNSpfiuM8G5KBDQg==$RYfc+w5c89htDo8r8cL9mScjCnd4D2RjBmejHT1qN4I=]
    >   pass [aophootheexaevahcooXaexaighi9X]

    #
    # Where do we want to load our users from ..
    #
    # Source control
    #   /deployments/common/users/live-users.yml
    #   /deployments/common/users/test-users.yml
    #
    # Test scripts
    #   A list of random names ...
    #   A file of random names ...
    #
    #

    #
    # Create our 'createuser' function.
    #

    createuser()
        {
        local name="${1:?}"
        local uuid="${2}"
        local hash="$(getpasshash "${name}")"
        local pass='-'

        if [ -z "${uuid}" ]
        then
            uuid=$(
                uuidgen
                )
        fi
        if [ "${hash}" == '-' ]
        then
            pass=$(
                pwgen 30 1
                )
            hash=$(
                newpasshash "${pass}"
                )
        fi

        echo "name [${name}]"
        echo "uuid [${uuid}]"
        echo "hash [${hash}]"
        echo "pass [${pass}]"
        echo ""

        }

    while read -r userinfo
    do
        createuser \
            "$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.name // empty')" \
            "$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.uuid // empty')"

    done <<< $(
        yq -I 0 -o json '.[]' \
            "${testusers}"
        )

    >   name [Lacey]
    >   uuid [dfbda6b5-a70b-4954-8543-c5fded6666f7]
    >   hash [$shiro1$SHA-256$500000$jGSGmO5tnVE8mxvuXAem+g==$iXd88gkuRNHUWiLD6KI5Mx1GgeO84+RMMKzxSuylc1Y=]
    >   pass [shaeF0dahvei8eequee6thaez9xei7]
    >
    >   name [Yasmin]
    >   uuid [3c252b4c-6ba8-4592-835b-3352b0a6bab6]
    >   hash [$shiro1$SHA-256$500000$8fiCszaNI4OWO50Lk7RkvA==$p1Sa/s7vPwvwALc0e6AsRvzyYmYiffTyJSXQLYFFj3Q=]
    >   pass [yie8oochaiquahvu7eog8uavahHaij]
    >
    >   name [Eleanor]
    >   uuid [2feaa3c0-3257-4f30-ad3c-cc1f5666e3ef]
    >   hash [$shiro1$SHA-256$500000$xPVltPje6O1EoUEyHq1QRA==$CZQKl/xv8aVQ8DHko86u3SXBys7eLqzBAweHff0f4DU=]
    >   pass [cee7shauHie0UP0Cooshauchiekaze]
    >
    >   name [Niamh]
    >   uuid [fcd8b61f-d128-4b8e-b363-575b95c9822c]
    >   hash [$shiro1$SHA-256$500000$/HdVwSFStS4PYDrS8ireUg==$TxqHGcwCll+556ehlfBzUIjm07kynfU+8hJTAbTOg8M=]
    >   pass [LuiX1aiBieboo3ua7koh1yee4Dee8l]

    #
    # Create a yaml file function.
    #

    yamlusers()
        {
        local yamlfile=${1:?}
        local userinfo

        while read -r userinfo
        do
            createuser \
                "$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.name // empty')" \
                "$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.uuid // empty')"

        done <<< $(
            yq -I 0 -o json '.[]' \
                "${yamlfile}"
            )
        }

    yamlusers "${testusers}"

    >   name [Lacey]
    >   uuid [dfbda6b5-a70b-4954-8543-c5fded6666f7]
    >   hash [$shiro1$SHA-256$500000$5r0NyZnozuf2fpGcURXJ0Q==$821AgrlkXJNyRVZrGMtzUXHC61w9EBdK4Okur7Tyi2c=]
    >   pass [maecaid7Ui6Fohphaiy5foo1gooyoh]
    >
    >   name [Yasmin]
    >   uuid [3c252b4c-6ba8-4592-835b-3352b0a6bab6]
    >   hash [$shiro1$SHA-256$500000$AXvLifJi1QCeBDYu1kqdKQ==$p+ynZQaai1JN3nGiZMm+fmrpWA2yuTiSMx+KRet7gIk=]
    >   pass [ohsae1ahzei8Ohkier1iexei0biel6]
    >
    >   name [Eleanor]
    >   uuid [4d52a26c-c8f5-47df-872a-0b6c4e5ed396]
    >   hash [$shiro1$SHA-256$500000$Z23fsAVrBrci4Wea3cuYZg==$czMLgKU5gf50zsIWGtSXLHFVWRDM0iGRGydodp0NYss=]
    >   pass [uiGau0axeec0tofahch8peedisheuf]
    >
    >   name [Niamh]
    >   uuid [e9196375-3df9-4a38-88b4-10997bb1841e]
    >   hash [$shiro1$SHA-256$500000$QDeRKUorY85tgfBeSpsi6Q==$+fFAVaG5QpUX9S7IbyuLqyJOAUON3DgZrAnRejwp74g=]
    >   pass [ieXooh1ceid5Eethae4aeK8phaifei]


    yamlusers '/deployments/common/users/test-users.yml'

    >   name [Nelia]
    >   uuid [5cf0cf95-157e-4a40-b95e-b163f22c2d92]
    >   hash [Hash of Nelia's password]
    >   pass [-]
    >
    >   name [Ghoria]
    >   uuid [237983b5-a21f-47c8-8fb3-80cbbc70ba56]
    >   hash [Hash of Ghoria's password]
    >   pass [-]
    >
    >   name [Nalla]
    >   uuid [65c7aeb1-3c2a-43b7-acc0-8c4497997c70]
    >   hash [Hash of Nalla's password]
    >   pass [-]
    >
    >   name [Wenia]
    >   uuid [63dfa19a-238b-45a8-82c9-8ee694547ccb]
    >   hash [$shiro1$SHA-256$500000$SF/lxvpwTVaGVrjNFV2Baw==$Dw5wDWiQpvvTbuFsivqG7qFjstMm0iY21Zr8RzhGmfs=]
    >   pass [xo1ahneirashae6ooXi8aechuo1eeK]
    >
    >   name [Ava]
    >   uuid [7699e3e5-797d-45be-85ee-476f785a1ab2]
    >   hash [$shiro1$SHA-256$500000$xYNzyGAL6W0/wPt5+Omtiw==$4kloJqbqlSYda5FBytlvtj0Zf60JER1pQ/M8JhP/bTI=]
    >   pass [Oosu1chizoo4kov6maigat4it8ohp2]

    #
    # But we can invoke the same function from an array of names.
    #

    testers=(
        "Chavezlafia"
        "Phillipsmog"
        "Pela"
        "Ellisiri Gonzatt"
        "Crawfordobby Owenorty"
        "Stephenmony Kendmitchell"
        "Griheart"
        "Clarpuff"
        "Kokakhan"
        )

    for name in "${testers[@]}"
    do
        echo "Name [${name}]"
    done

    >   Name [Chavezlafia]
    >   Name [Phillipsmog]
    >   Name [Pela]
    >   Name [Ellisiri Gonzatt]
    >   Name [Crawfordobby Owenorty]
    >   Name [Stephenmony Kendmitchell]
    >   Name [Griheart]
    >   Name [Clarpuff]
    >   Name [Kokakhan]


    for name in "${testers[@]}"
    do
        createuser "${name}"
    done


    >   name [Chavezlafia]
    >   uuid [bbc176ea-d2f8-47b9-9392-a4fe7ef68e61]
    >   hash [$shiro1$SHA-256$500000$oISkyqfDSsj5YTPxjdelxg==$/G/xpseqzC+gmqKzbKISuZcSG1eA4gIC6gnPPrtCAqQ=]
    >   pass [fiet5fie5keipi4saiHaTio4ein9Qu]
    >
    >   name [Phillipsmog]
    >   uuid [2c2ff2ce-bfea-4cc4-a3c4-5f7ae20d4efe]
    >   hash [$shiro1$SHA-256$500000$HBOIp7qs2ToqCOQSp9yzkw==$omyg14smCwOgTdH63bFSsQoInZZUEH8lgFZtPXINPKo=]
    >   pass [waipongo1eir7johD4baiw6oobohNe]
    >
    >   name [Pela]
    >   uuid [27378fd5-ca87-44ce-b2c4-49ec5f522efe]
    >   hash [$shiro1$SHA-256$500000$XsqO8mb1oU8NBDgANEPeSA==$6Hb0qnD7w69ZTJRPPZdZlNbpo8Ze8+CfynRzJdP0WpQ=]
    >   pass [eeTo0loo9lieXooc7phai7fuPaitoh]
    >
    >   Error: open Gonzatt // "-"
    >       : no such file or directory
    >   name [Ellisiri Gonzatt]
    >   uuid [18ad058b-c52f-46c6-8293-ebb973a0acc3]
    >   hash []
    >   pass [-]
    >
    >   Error: open Owenorty // "-"
    >       : no such file or directory
    >   name [Crawfordobby Owenorty]
    >   uuid [45215cfe-c595-4b44-aa06-4c468a953324]
    >   hash []
    >   pass [-]
    >
    >   Error: open Kendmitchell // "-"
    >       : no such file or directory
    >   name [Stephenmony Kendmitchell]
    >   uuid [51fa0e12-d794-4f7b-a2a8-84fabb5491ce]
    >   hash []
    >   pass [-]
    >
    >   name [Griheart]
    >   uuid [9427a140-e203-468e-a611-64aecf7134a3]
    >   hash [$shiro1$SHA-256$500000$jh74YGRrv1lIq4Yhy5vBWQ==$Ji5Mb7RXnoizO/gLNVsqrINH9pPu4QqzlzyWvX8xPvI=]
    >   pass [shei1aek2Aeb2ju8ruusheedua4pha]
    >
    >   name [Clarpuff]
    >   uuid [ee1b1b46-11be-49ec-b4dc-53e3b198c5dc]
    >   hash [$shiro1$SHA-256$500000$a6v+vw15grLQ5ZQ2yaITqg==$hJIZSeBgN64QYADuKLQPt1LTUzhWs48yze44J/d7ta8=]
    >   pass [AhBieng6aa3oon8eiwoo4ohchimoo8]
    >
    >   name [Kokakhan]
    >   uuid [b2639fab-604b-4a78-ac43-1d703ace415d]
    >   hash [$shiro1$SHA-256$500000$iaSkwzmp8cOpUR9KVNKioA==$296fhhReoI/dyqVEV/qMveVYagYLlrr6VhG5js7OgKI=]
    >   pass [ooxen1vaL6ahraesei6quiemue3ahs]

    #
    # Fails with spaces in the name.
    #

    newpasshash()
        {
        local password="${1:?}"
        java -jar "${HOME}/lib/shiro-tools-hasher.jar" -i 500000 -f shiro1 -a SHA-256 -gss 128 '${password:?}'
        }

    newpasshash "a b"


    createuser()
        {
        local name="${1:?}"
        local uuid="${2}"
        local hash="$(getpasshash \"${name}\")"
        local pass='-'

        if [ -z "${uuid}" ]
        then
            uuid=$(
                uuidgen
                )
        fi
        if [ "${hash}" == '-' ]
        then
            pass=$(
                pwgen 30 1
                )
            hash=$(
                newpasshash "${pass}"
                )
        fi

        echo "name [${name}]"
        echo "uuid [${uuid}]"
        echo "hash [${hash}]"
        echo "pass [${pass}]"
        echo ""

        }

    createuser "a b"

    >   name [a b]
    >   uuid [5b88a158-48f6-49d1-877c-bc4021ec4f4f]
    >   hash [$shiro1$SHA-256$500000$AnPFsrWaof154sjVPJJx6Q==$wd+7bzYPooyqH2mqU48iGsBSvP3zOi/ye6LzLY37xtg=]
    >   pass [aexaiboosov9bieraingij3vi4Ma7t]

    #
    # Try again ..
    #

    for name in "${testers[@]}"
    do
        createuser "${name}"
    done

    >   name [Chavezlafia]
    >   uuid [36010b0c-da6a-4379-b7fa-ae476c61d87e]
    >   hash [$shiro1$SHA-256$500000$jcr700igmzYat6TvsPzxow==$GaBTCEHnl0z3+wjd4x2Xzj04B7CJv4ISdXESa3EjjWs=]
    >   pass [aigahCixai7ahx5Choo0phuYutaeri]
    >
    >   name [Phillipsmog]
    >   uuid [ce4ef604-decf-4804-894e-801fc822910d]
    >   hash [$shiro1$SHA-256$500000$u7sStQ+6oNd2TmmEKJgjGg==$jnHdwUSrxdDs+MDi/0SZV9fo13svKsr9jvUOF+fvzvw=]
    >   pass [ierae0Aod0aevojeeK0unah5Veacae]
    >
    >   name [Pela]
    >   uuid [621d4e8d-4ca9-4b4d-bd42-64de5b689330]
    >   hash [$shiro1$SHA-256$500000$Cy2a4Jmn10ZqPQLKIjJ2Kg==$IxqtqQ7ldskDe0RkJiy+Uvht32Mho7msMUP6QLXs7zI=]
    >   pass [eesh2cahseer3bouX7oeSoo2lienga]
    >
    >   name [Ellisiri Gonzatt]
    >   uuid [60cafd79-0615-4081-9ecd-26b274a2b26c]
    >   hash [$shiro1$SHA-256$500000$CK7Iyj1akGVqQndlMmE04A==$p4Iq4YR4rd9UWK9D4u1/v90NFZ7eBtDM3e8oEJWlDd4=]
    >   pass [JaeLochu8Xoh4jaex9aechee4ceey4]
    >
    >   name [Crawfordobby Owenorty]
    >   uuid [d65ed1ce-7ab9-48ca-a4aa-ce2f738d2e82]
    >   hash [$shiro1$SHA-256$500000$vdeZcavn137whKH3ORWIqw==$YALswGMKwAL7m3nWXFCK16z9LKYVFHoLA64J78Efzyw=]
    >   pass [kou4eet0ooHagh8Quo7phush0reiNo]
    >
    >   name [Stephenmony Kendmitchell]
    >   uuid [7d02d6fe-b0b2-4c0e-8828-abcfab5ff293]
    >   hash [$shiro1$SHA-256$500000$T7zjrh4sg6dS2AkajarJRg==$L7qalZAEmKJxwjAPUXU4+chAs43CkLUFHJZFmNSIhIo=]
    >   pass [euDai8Eedaibooqu9ahghouRei8ahx]
    >
    >   name [Griheart]
    >   uuid [af6784c4-4725-448e-9adb-c8bb10a037e6]
    >   hash [$shiro1$SHA-256$500000$jHZLngdXoSE2gRkR8SX9EQ==$/Qx604/l4i6zuCmbWYGBrJsom6sL5ELueN6JN6jb5uI=]
    >   pass [naiNgiedeiyai9shahk2ooTheishuC]
    >
    >   name [Clarpuff]
    >   uuid [d9c26616-42e5-49f1-8c32-628449cab165]
    >   hash [$shiro1$SHA-256$500000$JlzqrkLQy8uNe+VYFU9QDg==$Z5p4gkF3rg/N9ISQ7ZuUAgyGx3c5g9buSSsKV6tjVG0=]
    >   pass [ahsiebauqu1HooGei7theghuu5Aega]
    >
    >   name [Kokakhan]
    >   uuid [9bcae2ff-6dee-463a-990f-ffc43fa5f8d5]
    >   hash [$shiro1$SHA-256$500000$b9TEDi+5j94xeUs2XdwTYA==$NEzaK6zDDvO6sQZy+wValgBxroLwxx0kzn9O2wbZc9A=]
    >   pass [ep0iShaeCa4phoh2coow4xoo6ahdoh]

---------------------------------------------------------------------------------------------------

    getpasshash()
        {
        local key="${1:?}"
        local datahost='128.232.222.153'
        local datauser='fedora'
        ssh -n "${datauser}@${datahost}" \
            "
            getpasshash '${key:?}'
            "
        }

    newpasshash()
        {
        local password="${1:?}"
        java \
            -jar "${HOME}/lib/shiro-tools-hasher.jar" \
            -i 500000 \
            -f shiro1 \
            -a SHA-256 \
            -gss 128 \
            '${password:?}'
        }

    createuserinner()
        {
        local name="${1:?}"
        local uuid="${2:?}"
        local hash="${3:?}"
        local pass="${4:?}"
        echo "name [${name}]"
        echo "uuid [${uuid}]"
        echo "hash [${hash}]"
        echo "pass [${pass}]"
        echo ""
        }

    createuser()
        {
        local name="${1:?}"
        local uuid="${2}"
        local hash="$(getpasshash \"${name}\")";
        local pass='-'
        if [ -z "${uuid}" ]
        then
            uuid=$(
                uuidgen
            )
        fi
        if [ "${hash}" == '-' ]
        then
            pass=$(
                pwgen 30 1
                )
            hash=$(
                newpasshash "${pass}"
                )
        fi;
        createuserinner \
            "${name}" \
            "${uuid}" \
            "${hash}" \
            "${pass}"
        }

    yamlusers()
        {
        local yamlfile=${1:?}
        local userinfo
        while read -r userinfo
        do
            createuser \
                "$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.name // empty')" \
                "$(jq --raw-output --null-input --argjson user "${userinfo}" '$user.uuid // empty')"
        done <<< $(
            yq -I 0 -o json '.[]' \
                "${yamlfile}"
            )
        }


    testers=(
        "Chavezlafia"
        "Phillipsmog"
        "Pela"
        "Ellisiri Gonzatt"
        "Crawfordobby Owenorty"
        "Stephenmony Kendmitchell"
        "Griheart"
        "Clarpuff"
        "Kokakhan"
        )

    for name in "${testers[@]}"
    do
        createuser "${name}"
    done

    >   name [Chavezlafia]
    >   uuid [747049ef-e5a8-4943-9164-83db919cdcf8]
    >   hash [$shiro1$SHA-256$500000$oICvJoRA7fwgXU9k4NNrOQ==$lY4/XS72sDui++ff9+H2FTm2w+MQNGbTuBsZp/GywMQ=]
    >   pass [IekahMechaeBacuG1oom7akoojiete]
    >   ....
    >   ....
    >   name [Kokakhan]
    >   uuid [1a83cf56-559a-41f1-a203-874a20a73e7c]
    >   hash [$shiro1$SHA-256$500000$njYjgBJeVIWuCSr3uUN0VA==$6WHnYOYhPppiJOORQd8RXgO2ghyoaa1lw2Ozuf//UCE=]
    >   pass [ooch6Goh7jahpeiPouju3jophue8du]


    yamlusers '/deployments/common/users/test-users.yml'

    >   name [Nelia]
    >   uuid [5cf0cf95-157e-4a40-b95e-b163f22c2d92]
    >   hash [Hash of Nelia's password]
    >   pass [-]
    >
    >   name [Ghoria]
    >   uuid [237983b5-a21f-47c8-8fb3-80cbbc70ba56]
    >   hash [Hash of Ghoria's password]
    >   pass [-]
    >
    >   name [Nalla]
    >   uuid [65c7aeb1-3c2a-43b7-acc0-8c4497997c70]
    >   hash [Hash of Nalla's password]
    >   pass [-]
    >
    >   name [Wenia]
    >   uuid [255cc451-c4eb-44ed-a519-72ae1271d932]
    >   hash [$shiro1$SHA-256$500000$3J5bWE3+67gXx8s7v+v8Gw==$pE64F4wMG/mqDQ4NhlTqCfkqJMTYru8jKCpVvjs/cg8=]
    >   pass [theeR2eiv9kah1coongaiVait6Phee]
    >
    >   name [Ava]
    >   uuid [e89f2d5a-5965-4484-b1ac-27ab3266bf42]
    >   hash [$shiro1$SHA-256$500000$evpTSNLmJKqQIkQQptRF+w==$t9YR1WqcvxBdm9VA8ScAWfKd5cAAh/uVp3Zuw3YEUqk=]
    >   pass [aenga4eeB6coongiphiph3weiChahl]

